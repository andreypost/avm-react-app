{"version":3,"sources":["serviceWorker.js","index.js"],"names":["Boolean","window","location","hostname","match","Main","lazy","Category","Services","Hall","Delivery","Warranty","Credit","Actions","About","Cooperation","Sertificate","Career","Contacts","Bonus","Registration","Terms","Manufacturers","Glossary","GlossaryInner","ProcardBase","App","useEffect","basename","fallback","className","exact","path","component","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"kSAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DC2BN,IAAMC,EAAOC,gBAAK,kBAAM,2EAClBC,EAAWD,gBAAK,kBAAM,qEACtBE,EAAWF,gBAAK,kBAAM,4EACtBG,EAAOH,gBAAK,kBAAM,4EAClBI,EAAWJ,gBAAK,kBAAM,8DACtBK,EAAWL,gBAAK,kBAAM,8DACtBM,EAASN,gBAAK,kBAAM,8DACpBO,EAAUP,gBAAK,kBAAM,8DACrBQ,EAAQR,gBAAK,kBAAM,8DACnBS,EAAcT,gBAAK,kBAAM,8DACzBU,EAAcV,gBAAK,kBAAM,8DACzBW,EAASX,gBAAK,kBAAM,8DACpBY,EAAWZ,gBAAK,kBAAM,8DACtBa,EAAQb,gBAAK,kBAAM,8DACnBc,EAAed,gBAAK,kBAAM,8DAC1Be,EAAQf,gBAAK,kBAAM,8DACnBgB,EAAgBhB,gBAAK,kBAAM,8DAC3BiB,EAAWjB,gBAAK,kBAAM,sEACtBkB,EAAgBlB,gBAAK,kBAAM,qEAC3BmB,EAAcnB,gBAAK,kBAAM,qEAElBoB,EAAM,WAQjB,OAHAC,qBAAU,WACR,OAAO,gBAGP,kBAAC,aAAD,CAAYC,SAAS,KACnB,kBAAC,WAAD,CAAUC,SAAU,yBAAKC,UAAU,iBAAf,eAClB,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAW5B,IACjC,kBAAC,IAAD,CAAO2B,KAAK,YAAYC,UAAW1B,IACnC,kBAAC,IAAD,CAAOyB,KAAK,YAAYC,UAAWzB,IACnC,kBAAC,IAAD,CAAOwB,KAAK,QAAQC,UAAWxB,IAC/B,kBAAC,IAAD,CAAOuB,KAAK,YAAYC,UAAWvB,IACnC,kBAAC,IAAD,CAAOsB,KAAK,YAAYC,UAAWtB,IACnC,kBAAC,IAAD,CAAOqB,KAAK,UAAUC,UAAWrB,IACjC,kBAAC,IAAD,CAAOoB,KAAK,WAAWC,UAAWpB,IAClC,kBAAC,IAAD,CAAOmB,KAAK,SAASC,UAAWnB,IAChC,kBAAC,IAAD,CAAOkB,KAAK,eAAeC,UAAWlB,IACtC,kBAAC,IAAD,CAAOiB,KAAK,eAAeC,UAAWjB,IACtC,kBAAC,IAAD,CAAOgB,KAAK,UAAUC,UAAWhB,IACjC,kBAAC,IAAD,CAAOe,KAAK,YAAYC,UAAWf,IACnC,kBAAC,IAAD,CAAOc,KAAK,SAASC,UAAWd,IAChC,kBAAC,IAAD,CAAOa,KAAK,gBAAgBC,UAAWb,IACvC,kBAAC,IAAD,CAAOY,KAAK,SAASC,UAAWZ,IAChC,kBAAC,IAAD,CAAOW,KAAK,iBAAiBC,UAAWX,IACxC,kBAAC,IAAD,CAAOU,KAAK,YAAYC,UAAWV,IACnC,kBAAC,IAAD,CAAOS,KAAK,iBAAiBC,UAAWT,IAGxC,kBAAC,IAAD,CAAOQ,KAAK,eAAeC,UAAWR,OAO9CS,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDsBpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.6a404e25.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, { useEffect, Suspense, lazy } from 'react';\nimport ReactDOM from 'react-dom';\nimport { HashRouter, Route } from \"react-router-dom\";\nimport 'bootstrap/dist/css/bootstrap.css';\nimport './reset.css';\nimport 'owl.carousel/dist/assets/owl.carousel.css';\nimport 'owl.carousel/dist/assets/owl.theme.default.css';\n/* \n.products__credit, .products__gift, .products__video, -->  uncomment\n#carouselIndex .carousel-indicators li -->  uncomment\nchange ../img to ./img\nchange: .products__card>img, .discount__card>img, .base__topbox img {\n        .products__card>img, .discount__card>img {\n    to: .products__card>a>img, .discount__card>a>img, .base__topbox img {\n        .products__card>a>img, .discount__card>a>img {\n\nadd class .spinner {\n  color: var(--lightblue);\n  background: white;\n}\nalso add it to: modals styles, -= modal enter cabinet =- \n*/\nimport './index.css';\nimport 'bootstrap';\n// import { Main } from './Main';\n// import { Category } from './Category';\n// import { Services } from './Services';\n// import { Hall } from './Hall';\n// import { Delivery } from './Delivery';\n// import { Warranty } from './Warranty';\n// import { Credit } from './Credit';\n// import { Actions } from './Actions';\n// import { About } from './About';\n// import { Cooperation } from './Cooperation';\n// import { Sertificate } from './Sertificate';\n// import { Career } from './Career';\n// import { Contacts } from './Contacts';\n// import { Bonus } from './Bonus';\n// import { Registration } from './Registration';\n// import { Terms } from './Terms';\n// import { Manufacturers } from './Manufacturers';\n// import { Glossary } from './Glossary';\n// import { GlossaryInner } from './GlossaryInner';\n// import { ProcardBase } from './ProcardBase';\nimport * as serviceWorker from './serviceWorker';\nconst Main = lazy(() => import('./Main'));\nconst Category = lazy(() => import('./Category'));\nconst Services = lazy(() => import('./Services'));\nconst Hall = lazy(() => import('./Hall'));\nconst Delivery = lazy(() => import('./Delivery'));\nconst Warranty = lazy(() => import('./Warranty'));\nconst Credit = lazy(() => import('./Credit'));\nconst Actions = lazy(() => import('./Actions'));\nconst About = lazy(() => import('./About'));\nconst Cooperation = lazy(() => import('./Cooperation'));\nconst Sertificate = lazy(() => import('./Sertificate'));\nconst Career = lazy(() => import('./Career'));\nconst Contacts = lazy(() => import('./Contacts'));\nconst Bonus = lazy(() => import('./Bonus'));\nconst Registration = lazy(() => import('./Registration'));\nconst Terms = lazy(() => import('./Terms'));\nconst Manufacturers = lazy(() => import('./Manufacturers'));\nconst Glossary = lazy(() => import('./Glossary'));\nconst GlossaryInner = lazy(() => import('./GlossaryInner'));\nconst ProcardBase = lazy(() => import('./ProcardBase'));\n\nexport const App = () => {\n  // const [index, setIndex] = useState('0') // settings for lifting up states: Glossary, GlossaryInner;\n  // const handleIndexSet = (value) => {\n  // setIndex(value)\n  // }\n  useEffect(() => {\n    return () => { }\n  })\n  return (\n    <HashRouter basename='/'>\n      <Suspense fallback={<div className=\"spinner block\">Loading...</div>}>\n        <Route exact path=\"/\" component={Main} />\n        <Route path=\"/Category\" component={Category} />\n        <Route path=\"/Services\" component={Services} />\n        <Route path=\"/Hall\" component={Hall} />\n        <Route path=\"/Delivery\" component={Delivery} />\n        <Route path=\"/Warranty\" component={Warranty} />\n        <Route path=\"/Credit\" component={Credit} />\n        <Route path=\"/Actions\" component={Actions} />\n        <Route path=\"/About\" component={About} />\n        <Route path=\"/Cooperation\" component={Cooperation} />\n        <Route path=\"/Sertificate\" component={Sertificate} />\n        <Route path=\"/Career\" component={Career} />\n        <Route path=\"/Contacts\" component={Contacts} />\n        <Route path=\"/Bonus\" component={Bonus} />\n        <Route path=\"/Registration\" component={Registration} />\n        <Route path=\"/Terms\" component={Terms} />\n        <Route path=\"/Manufacturers\" component={Manufacturers} />\n        <Route path=\"/Glossary\" component={Glossary} />\n        <Route path=\"/GlossaryInner\" component={GlossaryInner} />\n        {/* <Route path=\"/Glossary\" render={(props) => ( <Glossary {...props} index={index} setIndex={handleIndexSet} />)} /> */}\n        {/* <Route path=\"/GlossaryInner\" render={(props) => ( <GlossaryInner {...props} index={index} setIndex={handleIndexSet} />)} /> */}\n        <Route path=\"/ProcardBase\" component={ProcardBase} />\n        {/* <Footer /> */}\n      </Suspense>\n    </HashRouter>\n  );\n}\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}